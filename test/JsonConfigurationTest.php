<?php
/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-02-14 at 11:06:31.
 */

class JsonConfigurationTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var JsonConfiguration
     */
    protected $object;
    protected $testfiles = array();

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     * 
     */
    protected function setUp()
    {
      mt_srand(0); //seed random number generator
      $this->conf = new JsonConfiguration();
    }

    /**
     * Tears down the fixture,
     * Make sure any test config files created are removed.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
      foreach($this->testfiles as $fn=>$v) {
        $this->removeTestConfig($fn);
      }
      $this->testfiles = array();
    }
    
    protected function createTestConfig()
    {
      $testfn = "TESTCONFIG".mt_rand(999, 999999).".test.json";
      file_put_contents($testfn,
      '{ "default-paths":"TESTPATH1,TESTPATH2", "tests-path":"TESTSPATH1",'.
      ' "author":"TESTAUTHOR", "email":"TEST@EMAIL.ADDR" }'
        );
      
      //keep a cache of generated filenames, to ensure removal on tearDown.
      $this->testfiles[$testfn] = $testfn;
      return $testfn;
    }
    
    protected function removeTestConfig($filename)
    {
      if (file_exists($filename))
        unlink($filename);
    }

    /**
     * @covers JsonConfiguration::load
     * @covers Configuration::init
     * @covers Configuration::getSettings
     * @covers Configuration::__construct
     */
    public function testConstructThenLoadAndGetSettings()
    {
      $testfn = $this->createTestConfig();
      $this->conf = new JsonConfiguration();
      $this->assertTrue(is_a($this->conf, 'JsonConfiguration'));
      $this->conf->init($testfn);
      $this->assertCount(0, $this->conf->getSettings());
      $this->conf->load();
      $this->assertCount(4, $this->conf->getSettings());
      $this->assertEquals("TESTAUTHOR", $this->conf->getSetting("author"));
      $this->assertEquals("TESTSPATH1", $this->conf->getSetting("tests-path"));
      $this->assertFalse($this->conf->getSetting("UNKNOWN"));
      $this->assertFalse($this->conf->getSetting(false));
      $this->assertFalse($this->conf->getSetting(1));
      
      $this->removeTestConfig($testfn);
    }

    /**
     * @covers JsonConfiguration::save
     * @covers JsonConfiguration::load
     * @covers JsonConfiguration::setSetting
     * @covers JsonConfiguration::getSetting
     */
    public function testSave()
    {
      $testfn = $this->createTestConfig();
      $this->conf->init($testfn);
      $this->conf->load();
      $this->conf->setSetting("author", "NEWAUTHORVALUE");
      $this->conf->save();
      $this->conf->load();
      $this->assertEquals("NEWAUTHORVALUE", $this->conf->getSetting("author"));
      $this->assertEquals("TESTSPATH1", $this->conf->getSetting("tests-path"));
      $this->removeTestConfig($testfn);
    }

    /**
     * @covers JsonConfiguration::load
     * @covers JsonConfiguration::hasSetting
     * @covers Configuration::init
     */
    public function testHasSetting()
    {
      $testfn = $this->createTestConfig();
      $this->conf->init($testfn);
      $this->conf->load();
      $this->assertTrue($this->conf->hasSetting("author"));
      $this->assertTrue($this->conf->hasSetting("tests-path"));
      $this->assertFalse($this->conf->hasSetting("UNKNOWN"));
      $this->assertFalse($this->conf->hasSetting(null));

      $this->removeTestConfig($testfn);      
    }

    /**
     * @covers Configuration::init
     * @covers Configuration::reset
     * @covers Configuration::setFilename
     * @covers Configuration::getFilename
     */
    public function testInitResetAndGetFilename()
    {
      $this->conf->reset();
      $this->assertEquals("", $this->conf->getFilename());
      $this->conf->init("TESTCONFIG.json");
      $this->assertEquals("TESTCONFIG.json", $this->conf->getFilename());
    }
    
    /**
     * @covers JsonConfiguration::setSetting
     * @covers JsonConfiguration::getSetting
     * @covers Configuration::init
     * @covers Configuration::setSettings
     * @covers Configuration::getSettings
     */
    public function testSetSettingAndSettings()
    {
      $testfn = $this->createTestConfig();
      $this->conf->init($testfn);
      $this->conf->load();
      $this->conf->setSetting("TESTSETTING1", 123);
      $this->conf->setSetting("TESTSETTING2", "ABC");
      $this->conf->setSetting("TESTSETTING3", false);
      $this->assertEquals("123", $this->conf->getSetting("TESTSETTING1"));
      $this->assertEquals("ABC", $this->conf->getSetting("TESTSETTING2"));
      $this->assertEquals(false, $this->conf->getSetting("TESTSETTING3"));
      $this->conf->init($testfn);
      $this->conf->load();
      $this->conf->setSettings(array("REPLACE1"=>"1", "REPLACE2"=>"2"));
      $this->assertCount(2, $this->conf->getSettings());
      $this->assertEquals("1", $this->conf->getSetting("REPLACE1"));
      $this->assertNotEquals("123", $this->conf->getSetting("TESTSETTING1"));
      $this->assertFalse($this->conf->getSetting("TESTSETTING1"));
      
      $this->removeTestConfig($testfn);
    }
    
    /**
     * @covers JsonConfiguration::load 
     * @covers Configuration::init
     * @covers Configuration::getData
     * @covers Configuration::setData
     */    
    public function testGetAndSetData()
    {
      $testfn = $this->createTestConfig();
      $this->conf->init($testfn);
      $this->conf->load();
      $this->assertEquals(file_get_contents($testfn), $this->conf->getData());

      $this->removeTestConfig($testfn);
    }
}
